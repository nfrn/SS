from collections import OrderedDict


class Vulnerability:
    VAR_OVERFLOW = "VAROVERFLOW"
    RBP_OVERFLOW = "RBPOVERFLOW"
    RET_OVERFLOW = "RETOVERFLOW"
    INVALID_ACCS = "INVALIDACCS"
    S_CORRUPTION = "SCORRUPTION"

    basic_vulns = [VAR_OVERFLOW , RBP_OVERFLOW , RET_OVERFLOW]
    adv_vulns = [INVALID_ACCS , S_CORRUPTION]

    def __init__(self,name, function, address, fnname, overflow_var, overflown_var = ""  ):
        if( (name not in self.basic_vulns) and (name not in self.adv_vulns)):
            raise Exception ("Unkown vulnerability")

        self.name = name
        self.function = function
        self.address = address
        self.fnname = fnname
        self.overflow_var = overflow_var

        self.overflown_var = overflown_var

    def setVar(self,var):
        self.var = var

    def setMainFunction(self,function):
        self.function = function

    def setAddress(self,address):
        self.address= address

    def setMalFunction(self,function):
        self.fnname = function

    def toJSON( self ):
        output = {}
        output['vulnerability'] = self.name
        output['vuln_function'] = self.function
        output['address'] = self.address
        output['fnname'] = self.fnname
        output['overflow_var'] = self.overflow_var

        if(self.overflown_var != ""):
            output['overflown_var'] = self.overflown_var

        return output

def checkVulnerability(stack,program):
    print(stack)
    vulnerabilities = []

    ordered_vals = OrderedDict(
        sorted(stack.sub_stack.items(), reverse=True))

    unlimited = 0

    for add,desc in ordered_vals.items():
        current_desc = desc.split(' ')
        if current_desc[0] == "Unlimited":
            unlimited = 1
            calledFunctionPossible = current_desc[1]
            currentFunctionPossible = current_desc[2]
            overflowvar = getVariableName(program,add)

        elif desc.split(' ')[0] == "Variable" and unlimited==1:
            #This way we can detect multiple VAR_OVERFLOW
            overflowndvar = getVariableName(program,add)
            address = getFunctionAdd(program, calledFunctionPossible)
            vulnerability = Vulnerability(Vulnerability.VAR_OVERFLOW, currentFunctionPossible, address, calledFunctionPossible, overflowvar,overflowndvar)
            vulnerabilities.append(vulnerability)

    if unlimited==1:
        vulnerability = Vulnerability(Vulnerability.RBP_OVERFLOW, currentFunctionPossible, address, calledFunctionPossible, overflowvar)
        vulnerabilities.append(vulnerability)

        vulnerability = Vulnerability(Vulnerability.RET_OVERFLOW, currentFunctionPossible, address, calledFunctionPossible, overflowvar)
        vulnerabilities.append(vulnerability)

    return vulnerabilities


def getVariableName(program,add):
    for var in program.main.variables:
        if add == var.address:
            return var.name
    return 'ERROR'

def getFunctionAdd(program,function):

    for instr in program.main.instructions:
        if 'fnname' in instr.args.keys() and function == instr.args['fnname']:
            return instr.address
    return "ERROR"
from collections import OrderedDict
from Utils import *


class Vulnerability:
    VAR_OVERFLOW = "VAROVERFLOW"
    RBP_OVERFLOW = "RBPOVERFLOW"
    RET_OVERFLOW = "RETOVERFLOW"
    INVALID_ACCS = "INVALIDACCS"
    S_CORRUPTION = "SCORRUPTION"

    basic_vulns = [VAR_OVERFLOW , RBP_OVERFLOW , RET_OVERFLOW]
    adv_vulns = [INVALID_ACCS , S_CORRUPTION]

    def __init__(self,name, function, address, fnname, overflow_var, overflown_var = ""  ):
        if( (name not in self.basic_vulns) and (name not in self.adv_vulns)):
            raise Exception ("Unkown vulnerability")

        self.name = name
        self.function = function
        self.address = address
        self.fnname = fnname
        self.overflow_var = overflow_var

        self.overflown_var = overflown_var

    def setVar(self,var):
        self.var = var

    def setMainFunction(self,function):
        self.function = function

    def setAddress(self,address):
        self.address= address

    def setMalFunction(self,function):
        self.fnname = function

    def __str__(self):
        return self.name

    def toJSON( self ):
        output = {}
        output['vulnerability'] = self.name
        output['vuln_function'] = self.function
        output['address'] = self.address
        output['fnname'] = self.fnname
        output['overflow_var'] = self.overflow_var

        if(self.overflown_var != ""):
            output['overflown_var'] = self.overflown_var

        return output

def checkVulnerability(stack):
    print("cheking vulnerabilities")
    print(stack)
    vulnerabilities = []
    ordered_vals = stack.ordered()

    unlimited = False

    for add, stack_entry in ordered_vals.items():
        current_desc = stack_entry.descr.split(' ')
        if current_desc[0] == "Unlimited":
            unlimited = True
            calledFunctionPossible = current_desc[1]
            currentFunctionPossible = current_desc[2] 
            overflowvar = getVariableName(stack.program,add)

        elif current_desc[0] in ('INT','BUFFER') and unlimited:
            #This way we can detect multiple VAR_OVERFLOW
            overflowndvar = getVariableName(stack.program,add)
            address = getFunctionAdd(stack.program, calledFunctionPossible)   
            vulnerability = Vulnerability(Vulnerability.VAR_OVERFLOW, currentFunctionPossible, address, calledFunctionPossible, overflowvar,overflowndvar)
            vulnerabilities.append(vulnerability)

    if unlimited:
        vulnerability = Vulnerability(Vulnerability.RBP_OVERFLOW, currentFunctionPossible, address, calledFunctionPossible, overflowvar)
        vulnerabilities.append(vulnerability)

        vulnerability = Vulnerability(Vulnerability.RET_OVERFLOW, currentFunctionPossible, address, calledFunctionPossible, overflowvar)
        vulnerabilities.append(vulnerability)

    return vulnerabilities

def eval_function(stack,fname,function):
    if fname == 'gets':
        destination = stack.store_reg['DI'][1:-1]
        destination = trans_addr(destination)
        #Saves gets and function name to help in output later
        #stack.sub_stack[destination].descr = "Unlimited gets " + function
        stack.sub_stack[destination].set_write_size(-1, "gets", function) # leads to check_write function below

    elif fname == 'fgets':
        destination = stack.store_reg['DI'][1:-1]
        destination = trans_addr(destination)
        size = stack.store_reg['SI']
        #stack.sub_stack[destination].descr = size + ' fgets ' + function
        stack.sub_stack[destination].set_write_size(int(size, 16), "gets", function) # leads to check_write function below

    elif fname == 'strcpy':
        destination = trans_addr(stack.store_reg['DI'][1:-1])
        origin = trans_addr(stack.store_reg['SI'][1:-1])
        origin_size = stack.sub_stack[origin].write_size
        stack.sub_stack[destination].set_write_size(origin_size, "strcpy", function) # leads to check_write function below

#verifies values and adds vuln to stack vulnerabilities list
def check_write(entry, write_size, fnn, function_writing):
    print(entry.stack)
    ordered = entry.stack.ordered()
    if write_size==-1 : #unlimited
        unlimited_overflow(entry, ordered, fnn, function_writing)

    if(entry.bytes >= write_size ):
        #all good
        return

    diff = write_size - entry.bytes
    print("writing " + str(diff) + " more bytes than supposed to " + entry.name)
    var_end_addr = hex( int(entry.address.split("-")[1],16) - entry.bytes)

    #print("end_addr " + var_end_addr)
    end_write = hex(int(var_end_addr,16) - diff)
    #print("end_write " + end_write)

    prefix = "rbp"
    if(end_write > hex(0)):
        prefix +="-"
    else:
        prefix +="+"
    prefix += str(end_write)
    prefix = trans_addr(prefix)
    #calculate what exacly overwrites
    for addr, e in ordered.items():
        if addr >= entry.address :
            continue
        #print ("rbp-0x01" < "rbp-0x02") -> True
        print()
        if(addr < prefix):
            break

        address = getFunctionAdd(entry.stack.program, fnn)
        ## var overflow        
        vuln_type, overflowndvar = check_type_overflow(e)
        vulnerability = Vulnerability(vuln_type, fnn, address, function_writing, entry.name, overflowndvar)
        entry.stack.add_vulnerability(vulnerability)
    return 

def unlimited_overflow(entry, ordered, fnn , function_writing):
    for addr, e in ordered.items():
        if addr >= entry.address :
            continue
        address = getFunctionAdd(entry.stack.program, fnn)

        vuln_type, overflowndvar = check_type_overflow(e)
        vulnerability = Vulnerability(vuln_type, fnn, address, function_writing, entry.name, overflowndvar)

        entry.stack.add_vulnerability(vulnerability)

def check_type_overflow(overflown_entry):
    if( overflown_entry.type in ("buffer", "int")):
        return Vulnerability.VAR_OVERFLOW, overflown_entry.name
    elif overflown_entry.type == "POINTER" and overflown_entry.name == "RET":
        return Vulnerability.RET_OVERFLOW, ""
    elif  overflown_entry.type == "POINTER" and overflown_entry.name =="RBP":
        return Vulnerability.RBP_OVERFLOW, ""
    else:
        print("UNKOWN TYPE")

def getVariableName(program,add):
    for var in program.main.variables:
        if add == var.address:
            return var.name
    return 'ERROR'

def getFunctionAdd(program,function):

    for instr in program.main.instructions:
        if 'fnname' in instr.args.keys() and function == instr.args['fnname']:
            return instr.address
    return "ERROR"